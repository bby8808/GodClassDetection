package swr.actions.combine;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;

import org.eclipse.core.resources.IMarker;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.IncrementalProjectBuilder;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.IJavaModelMarker;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.IPackageFragment;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.MessageBox;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.IWorkbenchWindowActionDelegate;
import org.eclipse.ui.PlatformUI;

import gr.uom.java.ast.ASTReader;
import gr.uom.java.ast.CompilationErrorDetectedException;
import gr.uom.java.ast.SystemObject;
import gr.uom.java.distance.MySystem;
import swr.actions.aider.ActionsAider;
import swr.actions.combine.delete.DeleteAction;
import swr.actions.combine.export.ExportDataSetAction;
import swr.actions.combine.importproject.ImportProject;
import swr.actions.combine.multithread.PackageThread;

public class CombineAction implements IWorkbenchWindowActionDelegate{
	//public static int numOfPieces = 0;
	ExportDataSetAction exportAction = new ExportDataSetAction();
	int count=0;
	public void run(IAction action) {
		IProject project = ActionsAider.getProject();
		System.out.println("get "+project.getName());
		final IJavaProject javaProject;
//		MySystem system = buildSystemObject(project);
		try {
			javaProject = JavaCore.create(project);
			IPackageFragment[] packs = javaProject.getPackageFragments();
			ArrayList<CombinationPiece> pieces = new ArrayList<CombinationPiece>();
			printCurrentMemory("begin combination");
			for(int k=0; k<packs.length; k++){
				IPackageFragment pack = packs[k];
				if(pack.isReadOnly())
					continue;
				printCurrentMemory(k+"th pack "+pack.getElementName()+" combining");
//				PackageThread thread = new PackageThread(system, pack, count++);
//				thread.run();
//				printCurrentMemory(k);
				PreCombination preCombination = new PreCombination();
				ICompilationUnit[] units = pack.getCompilationUnits();
				ArrayList<ICompilationUnit> CUPool = preCombination.filteCUPool(units);
				pieces.addAll(combine(pack,preCombination,units,CUPool));
				pieces.addAll(combineForThree(pack,preCombination,units,CUPool));
			}
			printCurrentMemory("end combination");
			
			//int[] indices = getRandomIndex(100, pieces.size(), pieces.size()/20);
			String dir = "D://卜依凡//学习//论文-拆分God Class//数据集//trainset_0411//"+javaProject.getElementName();
			
			exportAction.exportFullMN(dir, pieces);
			MySystem system = buildSystemObject(project);
			printCurrentMemory("build the old system");
			int export_count = 0;
			for(int i=0; i<pieces.size(); i++){
			//for(int i=0; i<1; i++){
			//	if(pieces.get(i).getUnit().getElementName().equals("NewClass147.java")){
				exportAction.exportDataSet(dir+"//", system, pieces, i);
				printCurrentMemory("before export jdeodorant: "+i+"/"+pieces.size());
				ImportProject buildNewProject = new ImportProject();
				buildNewProject.checkJDeodorantResult(dir+"//", project, pieces, i);
				printCurrentMemory("end export jdeodorant: "+i+"/"+pieces.size());
			//	break;
			//	}
				export_count++;
			}
			System.out.println("export count:"+export_count);
			DeleteAction delete = new DeleteAction();
			delete.deleteAllCompbinationPieces(javaProject, pieces);
			project.clearHistory(null);
			//System.out.println("all pieces: "+numOfPieces);
		} catch (CoreException e) {
			e.printStackTrace();
		} 
		catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private void printCurrentMemory(String state){
		System.out.println("============="+state+"==============");
		Runtime runtime = Runtime.getRuntime();
		int freeMemory = (int) (runtime.freeMemory()/1024/1024);
		int totalMemory = (int) (runtime.totalMemory()/1024/1024);
		//int maxMemory = (int) (runtime.maxMemory()/1024/1024);
		System.out.println("free memory: "+freeMemory+"\ntotal memory: "+totalMemory);
		System.out.println("=============after gc==============");
		runtime.gc();
		freeMemory = (int) (runtime.freeMemory()/1024/1024);
		totalMemory = (int) (runtime.totalMemory()/1024/1024);
		//maxMemory = (int) (runtime.maxMemory()/1024/1024);
		System.out.println("free memory: "+freeMemory+"\ntotal memory: "+totalMemory);
	}
	
	private int[] getRandomIndex(int seed, int bound, int size){
		Random random = new Random(seed);
		int[] indices = new int[size];
		for(int i=0; i<size; i++){
			indices[i] = random.nextInt(bound);
		}
		return indices;
	}
	
	private ArrayList<CombinationPiece> combine(IPackageFragment pack,PreCombination preCombination, ICompilationUnit[] units,ArrayList<ICompilationUnit> CUPool) throws CoreException{
		ArrayList<CombinationPiece> pieces = new ArrayList<CombinationPiece>();

		for(int i=0; i<CUPool.size(); i++){	
			for(int j=i+1; j<CUPool.size(); j++){
//				if(count>MAX_CU_NUM){
//					return filtWrongPiece(pack, pieces);
//				}
				ICompilationUnit[] cps = {CUPool.get(i), CUPool.get(j)};
				if(preCombination.preCombine(cps)){
					System.out.println("combining "+count+"th piece in "+pack.getElementName());
					CombinationPiece piece = combineCompilationUnits(pack, cps, "NewClass"+(count++));
					if(piece !=null)
						pieces.add(piece);
				//	return pieces;
				}
			}
		}
		
		return filtWrongPiece(pack,pieces);
		//return pieces;
	}
	
	private ArrayList<CombinationPiece> combineForThree(IPackageFragment pack,PreCombination preCombination, ICompilationUnit[] units,ArrayList<ICompilationUnit> CUPool) throws CoreException{
		ArrayList<CombinationPiece> pieces = new ArrayList<CombinationPiece>();

			
		for(int i=0; i<CUPool.size(); i++){	
			for(int j=i+1; j<CUPool.size(); j++){
				for(int k=j+1; k<CUPool.size(); k++){
	//				if(count>MAX_CU_NUM){
	//					return filtWrongPiece(pack, pieces);
	//				}
					ICompilationUnit[] cps = {CUPool.get(i),CUPool.get(j),CUPool.get(k)};
					if(preCombination.preCombine(cps)){
						System.out.println("combining "+count+"th piece in "+pack.getElementName());
						CombinationPiece piece = combineCompilationUnits(pack, cps, "NewClass"+(count++));
						if(piece !=null)
							pieces.add(piece);
						//return pieces;
					}
				}

			}
		}
		
		return filtWrongPiece(pack,pieces);
		//return pieces;
	}
	
	private MySystem buildSystemObject(IProject project){
		final IJavaProject javaProject = JavaCore.create(project);
		try {
			if(ASTReader.getSystemObject() != null && javaProject.equals(ASTReader.getExaminedProject())) {
				new ASTReader(javaProject, ASTReader.getSystemObject(), null);
			}
			else {
				new ASTReader(javaProject, null);
			}
		}
		catch(CompilationErrorDetectedException e) {
			e.printStackTrace();
		}
		SystemObject so = ASTReader.getSystemObject();
		MySystem system = new MySystem(so, true);
		return system;
	}
	
	public ArrayList<CombinationPiece> filtWrongPiece(IPackageFragment pack, ArrayList<CombinationPiece> pieces) throws CoreException{
		pack.getJavaProject().getProject().build(IncrementalProjectBuilder.INCREMENTAL_BUILD, null);
		//System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		//System.out.println("filting in "+pieces.size()+" pieces");
		ArrayList<CombinationPiece> deletePieces = new ArrayList<CombinationPiece>();
		int count =0;
		for(CombinationPiece piece:pieces){
			ICompilationUnit unit = piece.getUnit();
			ArrayList <IMarker> result = new ArrayList <IMarker>();
			IResource r = unit.getResource();
			try {
				IMarker[] markers = r.findMarkers(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, true, IResource.DEPTH_ZERO);
				for (IMarker marker: markers){
				//	System.out.println("\t"+r.getName()+" has "+marker.getType());
			        Integer severityType = (Integer) marker.getAttribute(IMarker.SEVERITY);
			        if (severityType.intValue() == IMarker.SEVERITY_ERROR)
			        	result.add(marker);
			    }
			    if(result.size() >0 ){
			    //	System.out.println("delete unit "+ unit.getElementName());
			    	deletePieces.add(piece);
			    	unit.delete(true, new NullProgressMonitor());
			    	count++;
			    }
			    	
			} catch (CoreException e) {
				e.printStackTrace();
			}
		}
		//System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		pieces.removeAll(deletePieces);
		System.out.println();
		System.out.println("========================");
		System.out.println("filt "+ count+" units");
		System.out.println("left "+pieces.size()+" new units");
		System.out.println("========================");
		System.out.println();
		//openEndDialog();
		return pieces;
	}
	
	void openEndDialog(){
		final Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
		Display.getDefault().asyncExec(new Runnable() {
            @Override
            public void run() {
            	MessageBox dialog=new MessageBox(shell,SWT.OK|SWT.ICON_INFORMATION);
 		        dialog.setText("Finish");
 		        dialog.setMessage("Combination Finished!");
 		        dialog.open();
 		        return;
            }
		});
	}
	
//	static IType getMainType(ICompilationUnit unit){
//		String unitName = unit.getElementName();
//		String typeName = unit.getElementName().substring(0, unitName.indexOf('.'));
//		IType mainType = unit.getType(typeName);
//		return mainType;
//	}

	public static CombinationPiece combineCompilationUnits(IPackageFragment newPack, 
			ICompilationUnit[] units, String className) throws JavaModelException{
		IType[] mainTypes = new IType[units.length];
		for(int i=0; i<units.length; i++){
			IType mainType1 = ActionsAider.getMainType(units[i]);
			mainTypes[i] = mainType1;
		}
		
		Combination combination = new Combination(units, mainTypes);
		CombinationPiece combiPiece = combination.createNewCompilationUnit(className, newPack);

		return combiPiece;
	}

	static boolean isGeneric(IType type) throws JavaModelException{
		if(type.getTypeParameterSignatures().length!=0){
			return true;
		}
		return false;
	}

	@Override
	public void selectionChanged(IAction arg0, ISelection arg1) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void dispose() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void init(IWorkbenchWindow window) {
		// TODO Auto-generated method stub
		
	}
	
}
